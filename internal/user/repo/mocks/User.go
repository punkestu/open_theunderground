// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/punkestu/open_theunderground/domain"
	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// Create provides a mock function with given fields: fullname, username, password, email
func (_m *User) Create(fullname string, username string, password string, email string) (*domain.User, error) {
	ret := _m.Called(fullname, username, password, email)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*domain.User, error)); ok {
		return rf(fullname, username, password, email)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *domain.User); ok {
		r0 = rf(fullname, username, password, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(fullname, username, password, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: userID
func (_m *User) GetByID(userID string) (*domain.User, error) {
	ret := _m.Called(userID)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: username
func (_m *User) GetByUsername(username string) (*domain.User, error) {
	ret := _m.Called(username)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, fullname, username, email
func (_m *User) Update(userId string, fullname string, username string, email string) (*domain.User, error) {
	ret := _m.Called(userId, fullname, username, email)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*domain.User, error)); ok {
		return rf(userId, fullname, username, email)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *domain.User); ok {
		r0 = rf(userId, fullname, username, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(userId, fullname, username, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
